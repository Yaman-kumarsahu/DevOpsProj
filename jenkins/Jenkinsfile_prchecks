pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'dev-ops-proj'
        DOCKERFILE_PATH = './Dockerfile'
        PATH = "/usr/local/bin:$PATH"  // Add Docker path to Jenkins environment
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository and checkout the PR branch
                    def branchName = "${params.BRANCH_NAME ?: 'main'}"
                    git branch: branchName, url: 'https://github.com/Yaman-kumarsahu/DevOpsProj.git'
                }
            }
        }

        stage('Setup Virtual Environment') {
            steps {
                script {
                    // Create and activate the virtual environment, then install dependencies
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running tests in the virtual environment"
                    try {
                        // Run pytest and generate the JUnit XML results
                        sh '''
                        . venv/bin/activate
                        pytest --maxfail=1 --disable-warnings --maxfail=5 --junitxml=pytest-results.xml
                        '''
                    } catch (Exception e) {
                        echo "Tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    sh '''
                    docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_PATH} .
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                // Notify GitHub of success for PRs
                if (env.CHANGE_ID) {
                    githubNotify status: 'SUCCESS', context: 'ci/jenkins', description: 'All tests passed. Ready to merge into master!'
                }
            }
            echo 'Build succeeded!'
        }
        failure {
            script {
                // Notify GitHub of failure for PRs
                if (env.CHANGE_ID) {
                    githubNotify status: 'FAILURE', context: 'ci/jenkins', description: 'Build or tests failed. Please fix the issues before merging.'
                }
            }
            echo 'Build failed!'
        }

        always {
            // Publish test results, even if the build fails or succeeds
            junit '**/pytest-results.xml'
        }
    }
}
